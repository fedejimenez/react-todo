{"version":3,"sources":["Todo.jsx","NewTodoForm.jsx","TodoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleUpdate","handleChange","handleToggle","this","removeTodo","id","setState","e","preventDefault","updateTodo","target","value","toggleTodo","className","onSubmit","type","velue","name","onChange","completed","onClick","icon","faPen","faTrash","React","Component","NewTodoForm","handleSubmit","createTodo","uuidv4","htmlFor","placeholder","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0XAmFeA,E,kDA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAW,EACXC,KAAM,EAAKH,MAAMG,MAEnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAVH,E,2DAajBK,KAAKV,MAAMW,WAAWD,KAAKV,MAAMY,M,mCAIjCF,KAAKG,SAAS,CAAEX,WAAYQ,KAAKT,MAAMC,c,mCAG5BY,GACXA,EAAEC,iBACFL,KAAKV,MAAMgB,WAAWN,KAAKV,MAAMY,GAAIF,KAAKT,MAAME,MAChDO,KAAKJ,e,mCAGMQ,GACXJ,KAAKG,SAAS,CACZV,KAAMW,EAAEG,OAAOC,U,mCAINJ,GACXJ,KAAKV,MAAMmB,WAAWT,KAAKV,MAAMY,M,+BAwCjC,OApCIF,KAAKT,MAAMC,UAEX,yBAAKkB,UAAU,QACb,0BAAMA,UAAU,iBAAiBC,SAAUX,KAAKH,cAC9C,2BACEe,KAAK,OACLC,MAAOb,KAAKT,MAAME,KAClBqB,KAAK,OACLC,SAAUf,KAAKF,eAEjB,0CAMJ,yBAAKY,UAAU,QACb,wBACEA,UACEV,KAAKV,MAAM0B,UAAY,sBAAwB,YAEjDC,QAASjB,KAAKD,cAEbC,KAAKV,MAAMG,MAEd,yBAAKiB,UAAU,gBACb,4BAAQO,QAASjB,KAAKJ,YACpB,kBAAC,IAAD,CAAiBsB,KAAMC,OAEzB,4BAAQF,QAASjB,KAAKN,cACpB,kBAAC,IAAD,CAAiBwB,KAAME,a,GApElBC,IAAMC,W,eCqCVC,G,wDArCb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEE,KAAM,IACrB,EAAKK,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAK6B,aAAe,EAAKA,aAAa7B,KAAlB,gBAJH,E,yDAONS,GACXJ,KAAKG,SAAL,eACGC,EAAEG,OAAOO,KAAOV,EAAEG,OAAOC,U,mCAIjBJ,GACXA,EAAEC,iBACFL,KAAKV,MAAMmC,WAAX,eAA2BzB,KAAKT,MAAhC,CAAuCW,GAAIwB,cAAUV,WAAW,KAChEhB,KAAKG,SAAS,CAAEV,KAAM,O,+BAItB,OACE,0BAAMiB,UAAU,cAAcC,SAAUX,KAAKwB,cAC3C,2BAAOG,QAAQ,QAAf,YACA,2BACEf,KAAK,OACLgB,YAAY,WACZ1B,GAAG,OACHY,KAAK,OACLN,MAAOR,KAAKT,MAAME,KAClBsB,SAAUf,KAAKF,eAEjB,iD,GAhCkBuB,IAAMC,YCsEjBO,G,wDApEb,aAAe,IAAD,8BACZ,gBACKtC,MAAQ,CACXuC,MAAO,IAET,EAAKC,OAAS,EAAKA,OAAOpC,KAAZ,gBACd,EAAKqC,OAAS,EAAKA,OAAOrC,KAAZ,gBACd,EAAKsC,OAAS,EAAKA,OAAOtC,KAAZ,gBACd,EAAKuC,iBAAmB,EAAKA,iBAAiBvC,KAAtB,gBARZ,E,mDAWPwC,GACLnC,KAAKG,SAAS,CACZ2B,MAAM,GAAD,mBAAM9B,KAAKT,MAAMuC,OAAjB,CAAwBK,Q,6BAG1BjC,GACLF,KAAKG,SAAS,CACZ2B,MAAO9B,KAAKT,MAAMuC,MAAMM,QAAO,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,S,6BAI1CA,EAAIoC,GACT,IAAMC,EAAevC,KAAKT,MAAMuC,MAAMU,KAAI,SAAAC,GACxC,OAAIA,EAAKvC,KAAOA,EACP,eAAKuC,EAAZ,CAAkBhD,KAAM6C,IAEnBG,KAETzC,KAAKG,SAAS,CAAE2B,MAAOS,M,uCAGRrC,GACf,IAAMqC,EAAevC,KAAKT,MAAMuC,MAAMU,KAAI,SAAAC,GACxC,OAAIA,EAAKvC,KAAOA,EACP,eAAKuC,EAAZ,CAAkBzB,WAAYyB,EAAKzB,YAE9ByB,KAETzC,KAAKG,SAAS,CAAE2B,MAAOS,M,+BAGf,IAAD,OACDT,EAAQ9B,KAAKT,MAAMuC,MAAMU,KAAI,SAAAC,GACjC,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKvC,GACVA,GAAIuC,EAAKvC,GACTT,KAAMgD,EAAKhD,KACXuB,UAAWyB,EAAKzB,UAChBf,WAAY,EAAK+B,OACjB1B,WAAY,EAAK2B,OACjBxB,WAAY,EAAKyB,sBAIvB,OACE,yBAAKxB,UAAU,YACb,yCACY,4CAEZ,4BAAKoB,GACL,kBAAC,EAAD,CAAaL,WAAYzB,KAAK+B,c,GA/DfV,IAAMC,YCOdqB,MARf,WACE,OACE,yBAAKjC,UAAU,IACb,kBAAC,EAAD,QCKckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22236ea0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Todo.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen, faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n\n  handleUpdate(e) {\n    e.preventDefault();\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.toggleForm();\n  }\n\n  handleChange(e) {\n    this.setState({\n      task: e.target.value\n    });\n  }\n\n  handleToggle(e) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <div className=\"Todo\">\n          <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate}>\n            <input\n              type=\"text\"\n              velue={this.state.task}\n              name=\"task\"\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </div>\n      );\n    } else {\n      result = (\n        <div className=\"Todo\">\n          <li\n            className={\n              this.props.completed ? \"Todo-task completed\" : \"Todo-task\"\n            }\n            onClick={this.handleToggle}\n          >\n            {this.props.task}\n          </li>\n          <div className=\"Todo-buttons\">\n            <button onClick={this.toggleForm}>\n              <FontAwesomeIcon icon={faPen} />\n            </button>\n            <button onClick={this.handleRemove}>\n              <FontAwesomeIcon icon={faTrash} />\n            </button>\n          </div>\n        </div>\n      );\n    }\n    return result;\n  }\n}\n\nexport default Todo;\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.props.createTodo({ ...this.state, id: uuidv4(), completed: false });\n    this.setState({ task: \"\" });\n  }\n\n  render() {\n    return (\n      <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n        <label htmlFor=\"task\">New Todo</label>\n        <input\n          type=\"text\"\n          placeholder=\"New Todo\"\n          id=\"task\"\n          name=\"task\"\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button>Add Todo</button>\n      </form>\n    );\n  }\n}\n\nexport default NewTodoForm;\n","import React from \"react\";\nimport Todo from \"./Todo\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport \"./TodoList.css\";\n\nclass TodoList extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: []\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n  }\n\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter(t => t.id !== id)\n    });\n  }\n\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n\n  render() {\n    const todos = this.state.todos.map(todo => {\n      return (\n        <Todo\n          key={todo.id}\n          id={todo.id}\n          task={todo.task}\n          completed={todo.completed}\n          removeTodo={this.remove}\n          updateTodo={this.update}\n          toggleTodo={this.toggleCompletion}\n        />\n      );\n    });\n    return (\n      <div className=\"TodoList\">\n        <h1>\n          Todo List <span>React App</span>\n        </h1>\n        <ul>{todos}</ul>\n        <NewTodoForm createTodo={this.create} />\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}